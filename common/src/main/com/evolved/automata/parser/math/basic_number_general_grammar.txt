# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Number parsing
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
* == [*];
- == [-] | [negative] | [minus] ;
+ == [+] | [plus] | [positive] ;

double == double_p;

sign == + | - ;
digit == 0 | 9 | 8 | 7 | 6 | 5 | 4 | 3 | 2 | 1;
fract_digit == 0 | 9 | 8 | 7 | 6 | 5 | 4 | 3 | 2 | 1;

0 == [zero] | [zeroeth];
1 == [one] | [first]  | [a];
2 == [two] | [second];
3 == [three] | [third];
4 == [four] | [forth] | [fourth] ;
5 == [five] | [fifth];
6 == [six] | [sixth];
7 == [seven] | [seventh];
8 == [eight] | [ate] | [eighth];
9 == [nine] | [nineth];
10 == [ten] | [tenth] ;
11 == [eleven] | [eleventh];
12 == [twelve] | [twelveth];
13 == [thirteen] | [thirteenth];
14 == [fourteen] | [fourteenth];
15 == [fifteen] | [fifteenth];
16 == [sixteen] | [sixteenth];
17 == [seventeen] | [seventeenth];
18 == [eighteen] | [eighteenth];
19 == [nineteen] | [nineteenth];
below_20 == 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19;
between_10_and_20 == 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19;

20 == [twenty] | [twenty-] | [twentieth];
30 == [thirty] | [thirty-] | [thirtieth];
40 == [forty] | [forty-] | [fortieth];
50 == [fifty] | [fifty-] | [fifthieth];
60 == [sixty] | [sixty-] | [sixtieth];
70 == [seventy] | [seventy-] | [seventieth];
80 == [eighty] | [eighty-] | [eightieth];
90 == [ninety] | [ninety-] | [ninetieth];


decade == 90 | 80 | 70 | 60 | 50 | 40 | 30 | 20;
in_decades == decade, digit?;

100 == [hundred] | [hundreth] | [hundreds];
1000 == [thousand] | [thousandth] | [thousands];
1000000 == [million] | [millionth] | [millions];
1000000000 == [billion] | [billionth] | [billions];
1000000000000 == [trillion] | [trillionth] | [trillions];

less_than_hundred == below_20 | in_decades;
between_ten_and_hundred == in_decades | between_10_and_20;

group == 100 | 1000 | 1000000 | 1000000000 | 1000000000000;

num_body == less_than_hundred | ([and]?, group);
whole_number == 0 | (sign?, num_body+);

decimal_point == [.] | [point];
word_fraction == decimal_point, digit+;

word_decimal == whole_number, word_fraction?;

number == word_decimal | double;
